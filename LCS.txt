                        //MUNSHI ZAHIN
                        //20MCA037
                        //PRACTICAL -7 DAA
//Write a program to solve longest common subsequence problem using dynamic programming.
#include<stdio.h>
#include<string.h>
#define MAX 20
void longest_common_subsequence(int LCS_matrix[MAX][MAX], char *S1, char *S2, int S1_len, int S2_le );
void main()
{
    char S1[MAX]="ABCDE"; //row
    char S2[MAX]="ACDEEE";  //column
    int S1_len= strlen(S1);
    int S2_len= strlen(S2);
    int LCS_matrix[MAX][MAX];
    longest_common_subsequence( LCS_matrix,  S1,  S2, S1_len, S2_len );
    
}

void longest_common_subsequence(int LCS_matrix[MAX][MAX], char *S1, char *S2, int S1_len, int S2_len ){
    for (int i=0; i<=S1_len; i++){
        LCS_matrix[i][0] = 0;
    }
    for (int j=0; j<=S2_len; j++){
        LCS_matrix[0][j]= 0;
    }
    
    for (int i=1; i<=S1_len; i++){
        for (int j=1; j<=S2_len; j++){
            if (S1[i-1] == S2[j-1]){
                LCS_matrix[i][j]= LCS_matrix[i-1][j-1] + 1;
            }
            else if (LCS_matrix[i-1][j] >= LCS_matrix[i][j-1]){
                LCS_matrix[i][j] = LCS_matrix[i-1][j];
            }
            else{
                LCS_matrix[i][j]= LCS_matrix[i][j-1];
            }
        }
    }
    
    int last_index= LCS_matrix[S1_len][S2_len];
    char store_lcs_sequence[last_index+1];
    store_lcs_sequence[last_index] ='\0';
    int i = S1_len;
    int j = S2_len;
    
    while( i > 0 && j > 0){
        if(S1[i-1] == S2[j-1]){
            store_lcs_sequence[last_index-1] = S1[i-1];
            last_index --;
            i--;
            j--;
        }
        else if (LCS_matrix[i-1][j] > LCS_matrix[i][j-1]){
            i--;
        }
        else{
            j--;
        }
    }
    
      printf("S1 : %s \nS2 : %s \n", S1, S2);
      printf("LCS: %s", store_lcs_sequence);
    
}


