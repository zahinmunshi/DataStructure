/*                                                      (DAA)PRACTICAL-3
  BY:- MUNSHI ZAHIN(20MCA037)
       MCA SEM-2 
Write program to implement Quick Sort algorithm by randomly selecting any element of an array as the pivot element. 
Display the output after each call to the "PARTITION" function finishes.

*/
#include<stdio.h>
#include<time.h>
#include<stdlib.h>
int partition(int arr[], int low, int high );
void quicksort(int arr[], int low, int high);
int partition_r(int arr[], int low, int high);
void main()
{
    int n=0;
    printf("\nHow many elements you want to enter.....");
    scanf("%d",&n);
    int arr[n];
    
    srand(time(0));
    printf("\nYOUR DATA:- ");
    for(int i=0; i<n; i++)
    {
        arr[i]=rand() % n;
        printf("%d, ",arr[i]);
    }
    quicksort(arr, 0, n-1);
    
    printf("\nAfter:-");
    for(int i=0; i<n; i++)
    {
        printf("%d, ",arr[i]);
    }
}

int partition(int arr[], int low, int high )
{
    int i=low-1;
    int j=0;
    int pivot=arr[high];
    int temp=0;
    int temp1=0;
    
    for(j=low; j<=high-1; j++)
    {
        if(arr[j] < pivot)
        {
            i++;
            temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
        }
    }
    temp1=arr[i+1];
    arr[i+1]=arr[high];
    arr[high]=temp1;
    
    printf("\nCall:--  ");
    for(int i=low; i<=high; i++)
    {
        printf("%d, ",arr[i]);
    }
    printf("\n");
    return i+1;
}

void quicksort(int arr[], int low, int high)
{
    int partition_index=0;
    if(low<high)
    {
        partition_index=partition_r(arr, low, high);
        
        
        quicksort(arr, low, partition_index-1);
        quicksort(arr, partition_index+1, high);
    }
}

int partition_r(int arr[], int low, int high)
{
    int temp;
    srand(time(NULL));
    int random=low + rand() % (high-low);
    printf("\nPivot value :- %d", random);
    temp=arr[random];
    arr[random]=arr[high];
    arr[high]=temp;
    
    return partition(arr,low,high);
    
}